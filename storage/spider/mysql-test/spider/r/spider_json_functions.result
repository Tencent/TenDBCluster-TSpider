for master_1
for child2
child2_1
child2_2
child2_3
for child3
child3_1
child3_2
child3_3
test JSON_ARRAY() functions
this includes JSON_ARRAY(), JSON_ARRAY_APPEND() and JSON_ARRAY_INSERT()

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
SELECT Json_Array(56, 3.1416, 'My name is "Foo"', NULL);
Json_Array(56, 3.1416, 'My name is "Foo"', NULL)
[56, 3.1416, "My name is \"Foo\"", null]
INSERT INTO tbl VALUES (1, JSON_ARRAY(56, 3.1416, 'My name is "Foo"', NULL));
SELECT * FROM tbl;
id	j
1	[56, 3.1416, "My name is \"Foo\"", null]
SELECT * FROM tbl WHERE j = JSON_ARRAY(56, 3.1416, 'My name is "Foo"', NULL);
id	j
1	[56, 3.1416, "My name is \"Foo\"", null]
UPDATE tbl SET j = JSON_ARRAY(56, 3.1416, 'My name is "Foo"', 1234) WHERE id = 1;
SELECT * FROM tbl;
id	j
1	[56, 3.1416, "My name is \"Foo\"", 1234]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES (1, '["a", ["b", "c"], "d"]');
SET @j = '["a", ["b", "c"], "d"]';
INSERT INTO tbl VALUES (2, JSON_ARRAY_APPEND(@j, '$[1]', 1));
SELECT * FROM tbl ORDER BY id;
id	j
1	["a", ["b", "c"], "d"]
2	["a", ["b", "c", 1], "d"]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, JSON_ARRAY_INSERT(@j, '$[1]', 'x'));
SELECT * FROM tbl ORDER BY id;
id	j
1	["a", "x", ["b", "c"], "d"]
test JSON_CONTAINS() functions
this includes JSON_CONTAINS() and JSON_CONTAINS_PATH()

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
INSERT INTO tbl VALUES (1, '{"a": 1, "b": 2, "c": {"d": 4}}');
INSERT INTO tbl VALUES (2, '{"a": 3, "b": 2, "c": {"d": 4}}');
SELECT * FROM tbl WHERE JSON_CONTAINS(j, '1', '$.a');
id	j
1	{"a": 1, "b": 2, "c": {"d": 4}}
SELECT * FROM tbl ORDER BY id;
id	j
1	{"a": 1, "b": 2, "c": {"d": 4}}
2	{"a": 3, "b": 2, "c": {"d": 4}}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES (1, '{"a": 1, "b": 2, "c": {"d": 4}}');
SELECT * FROM tbl WHERE JSON_CONTAINS_PATH(j, 'one', '$.a', '$.e') = 0;
id	j
SELECT * FROM tbl WHERE JSON_CONTAINS_PATH(j, 'one', '$.a', '$.e') = 1;
id	j
1	{"a": 1, "b": 2, "c": {"d": 4}}
test Functions that return JSON VALUE Attributes
this includes JSON_DEPTH(), JSON_LENGTH(), JSON_TYPE() and JSON_VALID()

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
INSERT INTO tbl VALUES (1, '{"a": 1, "b": 2, "c": {"d": 4}}');
SELECT JSON_DEPTH(j) FROM tbl;
JSON_DEPTH(j)
3
SELECT * FROM tbl WHERE JSON_DEPTH(j) = 3;
id	j
1	{"a": 1, "b": 2, "c": {"d": 4}}
SELECT * FROM tbl WHERE JSON_DEPTH(j) = 4;
id	j
SELECT JSON_LENGTH(j) FROM tbl;
JSON_LENGTH(j)
3
SELECT * FROM tbl WHERE JSON_LENGTH(j) = 4;
id	j
SELECT * FROM tbl WHERE JSON_LENGTH(j) = 3;
id	j
1	{"a": 1, "b": 2, "c": {"d": 4}}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '{"a": [10, true]}');
SELECT JSON_TYPE(j) FROM tbl;
JSON_TYPE(j)
OBJECT
SELECT JSON_TYPE(JSON_EXTRACT(j, '$.a')) FROM tbl;
JSON_TYPE(JSON_EXTRACT(j, '$.a'))
ARRAY
SELECT JSON_TYPE(JSON_EXTRACT(j, '$.a[0]')) FROM tbl;
JSON_TYPE(JSON_EXTRACT(j, '$.a[0]'))
INTEGER
SELECT JSON_TYPE(JSON_EXTRACT(j, '$.a[1]')) FROM tbl;
JSON_TYPE(JSON_EXTRACT(j, '$.a[1]'))
BOOLEAN
SELECT id, JSON_VALID(j) FROM tbl;
id	JSON_VALID(j)
1	1
SELECT id FROM tbl WHERE JSON_VALID(j) = 0;
id
SELECT id FROM tbl WHERE JSON_VALID(j) = 1;
id
1
SELECT id, JSON_VALID(j) FROM tbl WHERE JSON_VALID(j) = 0;
id	JSON_VALID(j)
SELECT id, JSON_VALID(j) FROM tbl WHERE JSON_VALID(j) = 1;
id	JSON_VALID(j)
1	1
test Functions that modify JSON values
this includes JSON_INSERT(), JSON_MERGER(), JSON_REMOVE(), JSON_REPLACE(), JSON_SET() and JSON_UNQUOTE()

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
INSERT INTO tbl VALUES(1, '{"a": 1, "b": [2, 3], "c": "[true, false]"}');
SELECT * FROM tbl WHERE j = JSON_INSERT('{ "a": 1, "b": [2, 3]}', '$.c', '[true, false]');
id	j
1	{"a": 1, "b": [2, 3], "c": "[true, false]"}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '[1, 2, true, false]');
SELECT * FROM tbl WHERE j = JSON_MERGE('[1, 2]', '[true, false]');
id	j
1	[1, 2, true, false]
UPDATE tbl SET j = JSON_MERGE('[2, 1]', '[true, true]');
SELECT * FROM tbl WHERE j = JSON_MERGE('[1, 2]', '[true, false]');
id	j
SELECT * FROM tbl;
id	j
1	[2, 1, true, true]
UPDATE tbl SET j = JSON_MERGE('[8, 8]', '[false, false]') WHERE j = JSON_MERGE('[2, 1]', '[true, true]');
SELECT * FROM tbl;
id	j
1	[8, 8, false, false]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '["a", "d"]');
SELECT * FROM tbl WHERE j = JSON_REMOVE('["a", ["b", "c"], "d"]', '$[1]');
id	j
1	["a", "d"]
UPDATE tbl SET j = JSON_REMOVE(j, '$[0]');
SELECT * FROM tbl;
id	j
1	["d"]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES (1, '{ "a": 1, "b": [2, 3]}');
UPDATE tbl SET j = JSON_REPLACE(j, '$.a', 10, '$.c', '[true, false]');
SELECT * FROM tbl;
id	j
1	{"a": 10, "b": [2, 3]}
UPDATE tbl SET j = JSON_REPLACE(j, '$.b[1]', 4);
SELECT * FROM tbl;
id	j
1	{"a": 10, "b": [2, 4]}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '{ "a": 1, "b": [2, 3]}');
SELECT * FROM tbl;
id	j
1	{ "a": 1, "b": [2, 3]}
UPDATE tbl SET j = JSON_SET(j, '$.a', 10, '$.c', '[true, false]');
SELECT * FROM tbl;
id	j
1	{"a": 10, "b": [2, 3], "c": "[true, false]"}
SELECT * FROM tbl WHERE j = JSON_SET('{ "a": 1, "b": [2, 3]}', '$.a', 10, '$.c', '[true, false]');
id	j
1	{"a": 10, "b": [2, 3], "c": "[true, false]"}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '"abc"');
SELECT JSON_UNQUOTE(j) FROM tbl;
JSON_UNQUOTE(j)
abc
SELECT * FROM tbl WHERE JSON_UNQUOTE(j) = 'abc';
id	j
1	"abc"
SELECT * FROM tbl WHERE JSON_UNQUOTE(j) = 'abcd';
id	j
test Functions that relate to JSON searchs
this includes JSON_KEYS() and JSON_SEARCH() 

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
INSERT INTO tbl VALUES (1, '{"a": 1, "b": {"c": 30}}');
SELECT * FROM tbl WHERE JSON_KEYS(j) = JSON_KEYS('{"a": 1, "b": {"c": 30}}');
id	j
1	{"a": 1, "b": {"c": 30}}
SELECT * FROM tbl WHERE JSON_KEYS(j) = JSON_ARRAY("a", "b");
id	j
1	{"a": 1, "b": {"c": 30}}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES (1, '{"a": 1, "b": 2, "c": {"d": 4}}');
SELECT JSON_EXTRACT(j, '$.a') FROM tbl;
JSON_EXTRACT(j, '$.a')
1
SELECT JSON_EXTRACT(j, '$.b') FROM tbl;
JSON_EXTRACT(j, '$.b')
2
SELECT JSON_EXTRACT(j, '$.c') FROM tbl;
JSON_EXTRACT(j, '$.c')
{"d": 4}
SELECT JSON_EXTRACT(j, '$.d') FROM tbl;
JSON_EXTRACT(j, '$.d')
NULL
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '{"Name":"Tom", "Age":35}');
INSERT INTO tbl VALUES(2, '{"Name":"Jerry", "Age":18}');
SELECT * FROM tbl WHERE JSON_CONTAINS(j, '18', "$.Age");
id	j
2	{"Name":"Jerry", "Age":18}
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '[10, 20, [30, 40]]');
SELECT JSON_EXTRACT(j, '$[1]') FROM tbl;
JSON_EXTRACT(j, '$[1]')
20
SELECT * FROM tbl WHERE JSON_EXTRACT(j, '$[1]') = 20;
id	j
1	[10, 20, [30, 40]]
SELECT JSON_EXTRACT(j, '$[2][*]') FROM tbl;
JSON_EXTRACT(j, '$[2][*]')
[30, 40]
SELECT JSON_EXTRACT(j, '$[2][0]') FROM tbl;
JSON_EXTRACT(j, '$[2][0]')
30
SELECT * FROM tbl WHERE JSON_EXTRACT(j, '$[2][1]') = 40;
id	j
1	[10, 20, [30, 40]]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, '["abc", [{"k": "10"}, "def"], {"x":"abc"}, {"y":"bcd"}]');
SELECT JSON_SEARCH(j, 'one', 'abc') FROM tbl;
JSON_SEARCH(j, 'one', 'abc')
"$[0]"
SELECT JSON_SEARCH(j, 'all', 'abc') FROM tbl;
JSON_SEARCH(j, 'all', 'abc')
["$[0]", "$[2].x"]
SELECT JSON_SEARCH(j, 'all', 'ghi') FROM tbl;
JSON_SEARCH(j, 'all', 'ghi')
NULL
SELECT JSON_SEARCH(j, 'all', '10') FROM tbl;
JSON_SEARCH(j, 'all', '10')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$[*]') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$[*]')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$**.k') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$**.k')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$[*][0].k') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$[*][0].k')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$[1]') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$[1]')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', '10', NULL, '$[1][0]') FROM tbl;
JSON_SEARCH(j, 'all', '10', NULL, '$[1][0]')
"$[1][0].k"
SELECT JSON_SEARCH(j, 'all', 'abc', NULL, '$[2]') FROM tbl;
JSON_SEARCH(j, 'all', 'abc', NULL, '$[2]')
"$[2].x"
SELECT JSON_SEARCH(j, 'all', '%a%') FROM tbl;
JSON_SEARCH(j, 'all', '%a%')
["$[0]", "$[2].x"]
SELECT JSON_SEARCH(j, 'all', '%b%') FROM tbl;
JSON_SEARCH(j, 'all', '%b%')
["$[0]", "$[2].x", "$[3].y"]
SELECT JSON_SEARCH(j, 'all', '%b%', NULL, '$[0]') FROM tbl;
JSON_SEARCH(j, 'all', '%b%', NULL, '$[0]')
"$[0]"
SELECT JSON_SEARCH(j, 'all', '%b%', NULL, '$[2]') FROM tbl;
JSON_SEARCH(j, 'all', '%b%', NULL, '$[2]')
"$[2].x"
SELECT JSON_SEARCH(j, 'all', '%b%', NULL, '$[1]') FROM tbl;
JSON_SEARCH(j, 'all', '%b%', NULL, '$[1]')
NULL
SELECT JSON_SEARCH(j, 'all', '%b%', '', '$[1]') FROM tbl;
JSON_SEARCH(j, 'all', '%b%', '', '$[1]')
NULL
SELECT JSON_SEARCH(j, 'all', '%b%', '', '$[3]') FROM tbl;
JSON_SEARCH(j, 'all', '%b%', '', '$[3]')
"$[3].y"
test Functions that create JSON values
this includes JSON_ARRAY(), JSON_QUOTE() and JSON_OBJECT()

drop and create databases
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
CREATE DATABASE auto_test_local;
USE auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
CREATE DATABASE auto_test_remote;
USE auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
CREATE DATABASE auto_test_remote_2;
USE auto_test_remote_2;

create table for child
connection child2_1;
CHILD2_1_DROP_TABLES
CHILD2_1_CREATE_TABLES
connection child2_2;
CHILD2_2_DROP_TABLES
CHILD2_2_CREATE_TABLES

create table for master
connection master_1;
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl (id INT PRIMARY KEY, j JSON)ENGINE=Spider DEFAULT CHARSET=utf8
PARTITION BY LIST (id % 2)
(
PARTITION `pt0` VALUES IN (0) COMMENT = 'database "auto_test_remote", table "tbl", srv "s_2_1",aim "0"',
PARTITION `ptbl` VALUES IN (1) COMMENT = 'database "auto_test_remote_2", table "tbl", srv "s_2_2",aim "1"'
);

insert data and test
INSERT INTO tbl VALUES(1, 'null'),(2, '"null"'),(3, '[1,2,3]');
SELECT JSON_QUOTE(j) FROM tbl;
JSON_QUOTE(j)
"\"null\""
"null"
"[1,2,3]"
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES (1, json_array(1,'abc',NULL,true));
SELECT * FROM tbl WHERE (j = json_array(1,'abc',NULL,true));
id	j
1	[1, "abc", null, true]
TRUNCATE TABLE tbl;
INSERT INTO tbl VALUES(1, JSON_OBJECT('name', 'carrot', 'id', 87, 'flag', true));
INSERT INTO tbl VALUES(2, JSON_OBJECT('name', 'nuts', 'id', 85, 'flag', false, 'ext', JSON_OBJECT('name1', 'carrot', 'id1', 86, 'flag', true)));
INSERT INTO tbl VALUES (3, JSON_OBJECT());
INSERT INTO tbl VALUES (4, NULL);
SELECT * FROM tbl ORDER BY id;
id	j
1	{"id": 87, "flag": true, "name": "carrot"}
2	{"id": 85, "ext": {"id1": 86, "flag": true, "name1": "carrot"}, "flag": false, "name": "nuts"}
3	{}
4	NULL
SELECT * FROM tbl WHERE j = JSON_OBJECT('name', 'carrot', 'id', 87, 'flag', true);
id	j
1	{"id": 87, "flag": true, "name": "carrot"}
SELECT * FROM tbl where j = JSON_OBJECT('name', 'nuts', 'id', 85, 'flag', false, 'ext', JSON_OBJECT('name1', 'carrot', 'id1', 86, 'flag', true));
id	j
2	{"id": 85, "ext": {"id1": 86, "flag": true, "name1": "carrot"}, "flag": false, "name": "nuts"}
SELECT * FROM tbl where j != JSON_OBJECT('name', 'nuts', 'id', 85, 'flag', false, 'ext', JSON_OBJECT('name1', 'carrot', 'id1', 86, 'flag', true));
id	j
1	{"id": 87, "flag": true, "name": "carrot"}
3	{}
SELECT * FROM tbl WHERE j IS NULL;
id	j
4	NULL
SELECT * FROM tbl WHERE j IS NOT NULL ORDER BY id;
id	j
1	{"id": 87, "flag": true, "name": "carrot"}
2	{"id": 85, "ext": {"id1": 86, "flag": true, "name1": "carrot"}, "flag": false, "name": "nuts"}
3	{}
TRUNCATE TABLE tbl;

deinit
connection master_1;
DROP DATABASE IF EXISTS auto_test_local;
connection child2_1;
DROP DATABASE IF EXISTS auto_test_remote;
connection child2_2;
DROP DATABASE IF EXISTS auto_test_remote_2;
for master_1
for child2
child2_1
child2_2
child2_3
for child3
child3_1
child3_2
child3_3

end of test
